pragma solidity ^0.4.18;
//v1.1.1
import "./IexecOracle.sol";
import './IexecLib.sol';

contract IexecOracleAPI{


    address iexecOracleAddress;
    event IexecSubmitCallback(bytes32 submitTxHash, address indexed user, string stdout, string uri);

    //constructor
    function IexecOracleAPI(address _iexecOracleAddress, uint256 dappPrice, string dappName) public {
        iexecOracleAddress=_iexecOracleAddress;
        IexecOracle iexecOracle = IexecOracle(iexecOracleAddress);
        require(iexecOracle.registerDappAndProvider(dappPrice,dappName));
    }

    function iexecSubmit(string param) payable public {
        IexecOracle iexecOracle = IexecOracle(iexecOracleAddress);
        require(iexecOracle.submit.value(msg.value)(param));
    }

    function iexecSubmitCallback(bytes32 submitTxHash, address user, string stdout, string uri) public returns  (bool){
        require(msg.sender == iexecOracleAddress);
        IexecSubmitCallback(submitTxHash,user,stdout,uri);
        return true;
    }
}
